# Oracle Portfolio - Docker Compose pour développement local
# Architecture: Firebase + Vite + Cloud Run

version: '3.8'

services:
  # Backend Python (FastAPI)
  backend:
    build:
      context: ./backend-python
      dockerfile: Dockerfile
    container_name: oracle-backend
    ports:
      - "8080:8080"
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=debug
      - PORT=8080
    volumes:
      - ./backend-python:/app
      - /app/__pycache__
    command: uvicorn main:app --host 0.0.0.0 --port 8080 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - oracle-network

  # Frontend Development Server (Vite)
  frontend:
    image: node:18-alpine
    container_name: oracle-frontend
    working_dir: /app
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8080
      - VITE_ENVIRONMENT=development
    volumes:
      - .:/app
      - /app/node_modules
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0"
    depends_on:
      - backend
    networks:
      - oracle-network

  # Firebase Emulator Suite
  firebase-emulator:
    image: node:18-alpine
    container_name: oracle-firebase
    working_dir: /app
    ports:
      - "4000:4000"  # Emulator UI
      - "5001:5001"  # Functions
      - "8081:8081"  # Firestore
      - "9099:9099"  # Auth
    environment:
      - NODE_ENV=development
    volumes:
      - .:/app
      - /app/node_modules
    command: sh -c "npm install -g firebase-tools && firebase emulators:start --only functions,firestore,auth"
    networks:
      - oracle-network

  # Redis pour cache (optionnel)
  redis:
    image: redis:7-alpine
    container_name: oracle-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - oracle-network

  # PostgreSQL pour développement (alternative à Firestore)
  postgres:
    image: postgres:15-alpine
    container_name: oracle-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=oracle_portfolio
      - POSTGRES_USER=oracle_user
      - POSTGRES_PASSWORD=oracle_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - oracle-network

  # Nginx Reverse Proxy (optionnel pour production-like)
  nginx:
    image: nginx:alpine
    container_name: oracle-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - oracle-network

  # Monitoring avec Prometheus (optionnel)
  prometheus:
    image: prom/prometheus:latest
    container_name: oracle-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - oracle-network

  # Grafana pour visualisation (optionnel)
  grafana:
    image: grafana/grafana:latest
    container_name: oracle-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - oracle-network

networks:
  oracle-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# Configuration pour différents environnements
x-common-variables: &common-variables
  ENVIRONMENT: development
  LOG_LEVEL: debug
  
# Profils pour différents modes de développement
profiles:
  # Profil minimal (backend + frontend seulement)
  minimal:
    services:
      - backend
      - frontend

  # Profil complet avec monitoring
  full:
    services:
      - backend
      - frontend
      - firebase-emulator
      - redis
      - postgres
      - prometheus
      - grafana

  # Profil production-like
  production:
    services:
      - backend
      - frontend
      - nginx
      - redis

