import { initializeApp } from 'firebase/app';
import { 
  getFirestore, 
  doc, 
  setDoc, 
  getDoc, 
  collection, 
  addDoc,
  query,
  orderBy,
  limit,
  getDocs,
  serverTimestamp 
} from 'firebase/firestore';
import { 
  getAuth, 
  signInAnonymously, 
  onAuthStateChanged 
} from 'firebase/auth';

// Configuration Firebase (utilise les variables d'environnement)
const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_FIREBASE_APP_ID
};

// V√©rification de la configuration
const isConfigValid = Object.values(firebaseConfig).every(value => value && value !== 'undefined');

console.log('üî• Configuration Firebase DEBUG:', {
  apiKey: firebaseConfig.apiKey ? `‚úÖ ${firebaseConfig.apiKey.substring(0, 20)}...` : '‚ùå Manquante',
  authDomain: firebaseConfig.authDomain ? '‚úÖ D√©finie' : '‚ùå Manquante',
  projectId: firebaseConfig.projectId ? '‚úÖ D√©finie' : '‚ùå Manquante',
  storageBucket: firebaseConfig.storageBucket ? '‚úÖ D√©finie' : '‚ùå Manquante',
  messagingSenderId: firebaseConfig.messagingSenderId ? '‚úÖ D√©finie' : '‚ùå Manquante',
  appId: firebaseConfig.appId ? '‚úÖ D√©finie' : '‚ùå Manquante',
  isValid: isConfigValid ? '‚úÖ Valide' : '‚ùå Invalide'
});

console.log('üîç VARIABLES ENV DEBUG:', {
  VITE_FIREBASE_API_KEY: import.meta.env.VITE_FIREBASE_API_KEY ? `‚úÖ ${import.meta.env.VITE_FIREBASE_API_KEY.substring(0, 20)}...` : '‚ùå Manquante',
  VITE_FIREBASE_PROJECT_ID: import.meta.env.VITE_FIREBASE_PROJECT_ID || '‚ùå Manquante',
  NODE_ENV: import.meta.env.NODE_ENV || 'undefined'
});

// Initialisation Firebase seulement si la configuration est valide
let app, db, auth;

if (isConfigValid) {
  try {
    app = initializeApp(firebaseConfig);
    db = getFirestore(app);
    auth = getAuth(app);
    console.log('üî• Firebase initialis√© avec succ√®s');
  } catch (error) {
    console.error('‚ùå Erreur initialisation Firebase:', error);
  }
} else {
  console.warn('‚ö†Ô∏è Configuration Firebase invalide, Firebase d√©sactiv√©');
}

// Service Firebase pour les portfolios
export class FirebaseService {
  
  /**
   * Initialise l'authentification anonyme si n√©cessaire
   */
  static async initAuth() {
    if (!isConfigValid || !auth) {
      throw new Error('Firebase non configur√© correctement');
    }
    
    return new Promise((resolve, reject) => {
      const unsubscribe = onAuthStateChanged(auth, async (user) => {
        unsubscribe();
        
        if (user) {
          console.log('üîê Utilisateur connect√©:', user.uid);
          resolve(user);
        } else {
          try {
            console.log('üîê Connexion anonyme...');
            const userCredential = await signInAnonymously(auth);
            console.log('‚úÖ Connexion anonyme r√©ussie:', userCredential.user.uid);
            resolve(userCredential.user);
          } catch (error) {
            console.error('‚ùå Erreur connexion anonyme:', error);
            reject(error);
          }
        }
      });
    });
  }

  /**
   * Sauvegarde les allocations du portfolio dans Firestore
   * @param {Object} allocations - Les allocations du portfolio
   * @returns {Promise<boolean>} Succ√®s de la sauvegarde
   */
  static async savePortfolioAllocations(allocations) {
    try {
      if (!isConfigValid) {
        console.warn('‚ö†Ô∏è Firebase non configur√©, sauvegarde ignor√©e');
        return false;
      }
      
      // S'assurer que l'utilisateur est connect√©
      const user = await this.initAuth();
      
      const portfolioData = {
        ...allocations,
        lastUpdated: serverTimestamp(),
        userId: user.uid,
        version: '1.0'
      };

      // Sauvegarder dans portfolios/{userId}/allocations/current
      const docRef = doc(db, 'portfolios', user.uid, 'allocations', 'current');
      await setDoc(docRef, portfolioData);
      
      console.log('üíæ Allocations sauvegard√©es:', portfolioData);
      
      // Optionnel : Ajouter √† l'historique
      await this.addToHistory(user.uid, allocations);
      
      return true;
    } catch (error) {
      console.error('‚ùå Erreur sauvegarde allocations:', error);
      return false;
    }
  }

  /**
   * R√©cup√®re les allocations du portfolio depuis Firestore
   * @returns {Promise<Object|null>} Les allocations ou null si pas trouv√©es
   */
  static async getPortfolioAllocations() {
    try {
      if (!isConfigValid) {
        console.warn('‚ö†Ô∏è Firebase non configur√©, utilisation des valeurs par d√©faut');
        return null;
      }
      
      // S'assurer que l'utilisateur est connect√©
      const user = await this.initAuth();
      
      const docRef = doc(db, 'portfolios', user.uid, 'allocations', 'current');
      const docSnap = await getDoc(docRef);
      
      if (docSnap.exists()) {
        const data = docSnap.data();
        console.log('üì• Allocations r√©cup√©r√©es:', data);
        
        // Retourner seulement les allocations (sans m√©tadonn√©es)
        const { lastUpdated, userId, version, ...allocations } = data;
        return {
          allocations,
          metadata: { lastUpdated, userId, version }
        };
      } else {
        console.log('üì≠ Aucune allocation trouv√©e, utilisation des valeurs par d√©faut');
        return null;
      }
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration allocations:', error);
      return null;
    }
  }

  /**
   * Ajoute une entr√©e √† l'historique des modifications
   * @param {string} userId - ID de l'utilisateur
   * @param {Object} allocations - Les allocations √† historiser
   */
  static async addToHistory(userId, allocations) {
    try {
      if (!isConfigValid || !db) {
        return;
      }
      
      const historyRef = collection(db, 'portfolios', userId, 'history');
      await addDoc(historyRef, {
        allocations,
        timestamp: serverTimestamp(),
        action: 'allocation_update'
      });
      
      console.log('üìö Ajout√© √† l\'historique');
    } catch (error) {
      console.error('‚ùå Erreur ajout historique:', error);
    }
  }

  /**
   * R√©cup√®re l'historique des modifications (optionnel)
   * @param {number} limitCount - Nombre d'entr√©es √† r√©cup√©rer
   * @returns {Promise<Array>} Historique des modifications
   */
  static async getPortfolioHistory(limitCount = 10) {
    try {
      if (!isConfigValid) {
        return [];
      }
      
      const user = await this.initAuth();
      
      const historyRef = collection(db, 'portfolios', user.uid, 'history');
      const q = query(historyRef, orderBy('timestamp', 'desc'), limit(limitCount));
      const querySnapshot = await getDocs(q);
      
      const history = [];
      querySnapshot.forEach((doc) => {
        history.push({
          id: doc.id,
          ...doc.data()
        });
      });
      
      console.log('üìö Historique r√©cup√©r√©:', history.length, 'entr√©es');
      return history;
    } catch (error) {
      console.error('‚ùå Erreur r√©cup√©ration historique:', error);
      return [];
    }
  }

  /**
   * Teste la connectivit√© Firebase
   * @returns {Promise<boolean>} √âtat de la connexion
   */
  static async testConnection() {
    try {
      if (!isConfigValid) {
        console.warn('‚ö†Ô∏è Firebase non configur√©, utilisation des valeurs par d√©faut');
        return false;
      }
      
      const user = await this.initAuth();
      console.log('üî• Firebase connect√©, utilisateur:', user.uid);
      return true;
    } catch (error) {
      console.error('‚ùå Erreur connexion Firebase:', error);
      return false;
    }
  }

  /**
   * R√©initialise les allocations aux valeurs par d√©faut
   * @returns {Promise<boolean>} Succ√®s de la r√©initialisation
   */
  static async resetToDefaults() {
    const defaultAllocations = {
      stocks: 60,
      bonds: 25,
      commodities: 10,
      cash: 5
    };
    
    return await this.savePortfolioAllocations(defaultAllocations);
  }
}

// Export par d√©faut
export default FirebaseService;

